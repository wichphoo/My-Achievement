# -*- coding: utf-8 -*-
"""Ztier_predict_RFclassify.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1809jDEb5NMBwi39TxBAxzcv42CkSZo_i
"""

import numpy as np
import os
import pandas as pd
from sklearn.model_selection import train_test_split
import pathlib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import metrics
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import RobustScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
from sklearn.model_selection import cross_val_score

"""Import Data"""

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['Ztier_total.csv']))

df.info()

"""Prep Data"""

del df['MerchantID']
#convert object to float64
df['Average - Short-Term Debt/Equity'] = pd.to_numeric(df['Average - Short-Term Debt/Equity'], errors='coerce')
df['Average - Cash/Net Sales'] = pd.to_numeric(df['Average - Cash/Net Sales'], errors='coerce')
df['Average - Ebit/Sales'] = pd.to_numeric(df['Average - Ebit/Sales'], errors='coerce')
df['Average - Net Income/Sales'] = pd.to_numeric(df['Average - Net Income/Sales'], errors='coerce')
df['Average - Ebitda/Interest Expense'] = pd.to_numeric(df['Average - Ebitda/Interest Expense'], errors='coerce')
df['Average - Ebit/Interest Expenses'] = pd.to_numeric(df['Average - Ebit/Interest Expenses'], errors='coerce')
df['Average - Account Payable/Sales'] = pd.to_numeric(df['Average - Account Payable/Sales'], errors='coerce')
df = df.fillna(0)

#df.head()

df['Z-score Tier'].replace({-1:0}, inplace=True)

df2=df

cols_to_normalize=df2.columns[0:29]

col_values=df2[cols_to_normalize].values

#col_scaled=MinMaxScaler().fit_transform(col_values)
col_scaled=RobustScaler().fit_transform(col_values)

df2[cols_to_normalize]=pd.DataFrame(col_scaled,columns=cols_to_normalize)

#check normalize yet ?
df2.agg(['min', 'max','mean'])

"""Split Data"""

X=df2[df2.columns[0:29]]

y=df2[df2.columns[-1:]]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=5)

"""Build Model"""

clf=RandomForestClassifier(n_estimators=500, random_state=5)

clfCV = cross_val_score(clf, X_train, y_train, cv=10)

#clfCV

np.mean(clfCV)

clf.fit(X_train,y_train)

print("RF test accuracy: %0.5f" % clf.score(X_test, y_test))

"""Save Model"""

from sklearn.externals import joblib

joblib_file = "RF_model.pkl"  
joblib.dump(clf, joblib_file)

from google.colab import files
files.download('RF_model.pkl')

"""Confuse Matrix"""

y_pred=clf.predict(X)

y_pred = y_pred.tolist()

conf=metrics.confusion_matrix(y, y_pred)

conf=pd.DataFrame(conf)
conf

print(metrics.classification_report(y, y_pred))

"""VarImp"""

#Feature Imp
clf.fit(X, y)
importances = clf.feature_importances_
std = np.std([tree.feature_importances_ for tree in clf.estimators_],
             axis=0)
indices = np.argsort(importances)[::-1]

print("Feature ranking:")
for f in range(X.shape[1]):
    print("%d. %s (%f)" % (f + 1, X.columns[f], importances[indices[f]]))

"""ROC Curve"""

#acc when pred with all data
print("Accuracy:",metrics.accuracy_score(y_testall, y_predall))

from sklearn.metrics import roc_auc_score
from sklearn.metrics import roc_curve
from sklearn.metrics import plot_roc_curve
from matplotlib import pyplot

#ROC curve
probs = clf.predict_proba(X)

probs = probs[:, 1]

plot_roc_curve(clf, X, y)

"""Export Prediction Table"""

#Create Prediction table
y_predall = clf.predict(X)

y_predall = y_predall.tolist()

y_testall = y['Z-score Tier'].values.tolist()

#Recall merchantID to make prediction table
import io
df = pd.read_csv(io.BytesIO(uploaded['Ztier_total.csv']))
dfwithID = df

ID = dfwithID['MerchantID'].tolist()

dataframe = pd.DataFrame([ID, y_testall, y_predall], index =['MerchantID', 'y_actual', 'y_predict'])

dataframe = dataframe.T

dataframe.to_csv('Prediction RF.csv')

from google.colab import files
files.download('Prediction RF.csv')