# -*- coding: utf-8 -*-
"""EssembleModel_pred_Ztier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ce86z5iUr7jj9JUZmRYqv-b13Ny7KG4T
"""

from sklearn.externals import joblib
import numpy as np
import pandas as pd
import os
from sklearn.model_selection import train_test_split
import pathlib
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.datasets import make_classification
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import RobustScaler
from sklearn.preprocessing import Normalizer
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import VotingClassifier
from sklearn.ensemble import StackingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from keras.wrappers.scikit_learn import KerasClassifier
from tensorflow.keras.wrappers.scikit_learn import KerasRegressor
from sklearn.pipeline import Pipeline

"""Import Data"""

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['Ztier_total.csv']))

"""Prep Data"""

del df['MerchantID']
#convert object to float64
df['Average - Short-Term Debt/Equity'] = pd.to_numeric(df['Average - Short-Term Debt/Equity'], errors='coerce')
df['Average - Cash/Net Sales'] = pd.to_numeric(df['Average - Cash/Net Sales'], errors='coerce')
df['Average - Ebit/Sales'] = pd.to_numeric(df['Average - Ebit/Sales'], errors='coerce')
df['Average - Net Income/Sales'] = pd.to_numeric(df['Average - Net Income/Sales'], errors='coerce')
df['Average - Ebitda/Interest Expense'] = pd.to_numeric(df['Average - Ebitda/Interest Expense'], errors='coerce')
df['Average - Ebit/Interest Expenses'] = pd.to_numeric(df['Average - Ebit/Interest Expenses'], errors='coerce')
df['Average - Account Payable/Sales'] = pd.to_numeric(df['Average - Account Payable/Sales'], errors='coerce')
df = df.fillna(0)

df2=df

df2['Z-score Tier'].replace({-1:0}, inplace=True)

cols_to_normalize=df2.columns[0:29]

col_values=df2[cols_to_normalize].values

col_scaled=RobustScaler().fit_transform(col_values)

df2[cols_to_normalize]=pd.DataFrame(col_scaled,columns=cols_to_normalize)

X=df2[df2.columns[0:29]]

y=df2[df2.columns[-1:]]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=5)

"""Load Model"""

from google.colab import files
uploaded = files.upload()

RF = joblib.load('RF_model.pkl')

NB = joblib.load('NB_model.pkl')

LR = joblib.load('LR_model.pkl')

TF = keras.models.load_model('TF_Model.h5')

"""For keras"""

def build_model():
  model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
  ])

  model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.001),
                loss=tf.keras.losses.BinaryCrossentropy(from_logits=False),
                metrics=['accuracy'])
  return model

keras_model = KerasClassifier(build_model)

keras_model.fit(X_train, y_train, epochs=200, batch_size=32, verbose=1)

keras_model._estimator_type = "classifier"

"""Acc for each Model"""

RF.score(X_test, y_test)

NB.score(X_test, y_test)

LR.score(X_test, y_test)

keras_model.score(X_test, y_test)

"""New Essemble Model"""

#newclf = StackingClassifier(estimators=[('RF', RF), ('NB', NB), ('LR', LR)], final_estimator=LogisticRegression())
newclf2 = StackingClassifier(estimators=[('RF', RF), ('NB', NB), ('LR', LR), ('TF', keras_model)], final_estimator=LogisticRegression())

#newclf.fit(X_train, y_train)
newclf2.fit(X_train, y_train)

newclf.score(X_test, y_test)

newclf.score(X, y)

"""Export Model"""

from sklearn.externals import joblib

joblib_file = "Ess_model.pkl"  
joblib.dump(newclf, joblib_file)

from google.colab import files
files.download('Ess_model.pkl')

"""Cunfuse"""

y_pred=newclf.predict(X)

y_pred = y_pred.tolist()

conf=metrics.confusion_matrix(y, y_pred)

conf=pd.DataFrame(conf)
conf

print(metrics.classification_report(y, y_pred))

"""Export Pred Table"""

pre_prob = newclf.predict_proba(X)

pre_prob = pd.DataFrame(pre_prob)

pre_prob1 = pre_prob[0].values.tolist()

pre_prob = newclf.predict_proba(X)

pre_prob = pd.DataFrame(pre_prob)

pre_prob2 = pre_prob[1].values.tolist()

y_all = y['Z-score Tier'].values.tolist()

#Recall merchantID to make prediction table
import io
df = pd.read_csv(io.BytesIO(uploaded['Ztier_total.csv']))
dfwithID = df

ID = dfwithID['MerchantID'].tolist()

dataframe = pd.DataFrame([ID, y_all, y_pred, pre_prob1, pre_prob2], index =['MerchantID', 'y_actual', 'y_predict', 'Predict_Prob(0)', 'Predict_Prob(1)'])

dataframe = dataframe.T

dataframe.to_csv('Prediction Essemble.csv')

from google.colab import files
files.download('Prediction Essemble.csv')

"""ROC"""

from sklearn.metrics import roc_auc_score
from sklearn.metrics import roc_curve
from sklearn.metrics import plot_roc_curve
from matplotlib import pyplot
from matplotlib import pyplot as plt

plot_roc_curve(newclf, X, y)

